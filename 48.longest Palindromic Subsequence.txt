//longest Palindromic Subsequence
class Solution {
    public int longestPalindromeSubseq(String s) {
        int m=s.length();
        String rev="";
        for(int i=m-1;i>=0;i--){
            char ch=s.charAt(i);
            rev=rev+ch;
        }
        int n=rev.length();
        int dp[][]=new int[m+1][n+1];
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                dp[i][j]=-1;
            }
        }
        return findlcs(s,rev,m,n,dp);
    }
    public static int findlcs(String X,String Y,int m,int n,int dp[][])     {
        if(m==0 || n==0){
            return 0;
        }
        if(dp[m][n]!=-1){
            return dp[m][n];
        }
        if(X.charAt(m-1)==Y.charAt(n-1)){
            return dp[m][n]=1+findlcs(X,Y,m-1,n-1,dp);
        }
        else{
            return dp[m][n]=Math.max(findlcs(X,Y,m-1,n,dp),findlcs(X,Y,m,n-1,dp));
        }
    }
}