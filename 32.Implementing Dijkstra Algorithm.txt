//Implementing Dijkstra Algorithm
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static class Pair implements Comparable<Pair>{
        int v;
        int wt;
        Pair(int v,int wt){
            this.v=v;
            this.wt=wt;
        }
        public int compareTo(Pair that){
            return this.wt-that.wt;
        }
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        boolean visited[]=new boolean[V];
        PriorityQueue<Pair>q=new PriorityQueue<>();
        q.add(new Pair(S,0));
        int ans[]=new int[V];
        Arrays.fill(ans,Integer.MAX_VALUE);
        
        ans[S]=0;
        while(!q.isEmpty()){
            Pair curr=q.remove();
            int vt=curr.v;
            if(visited[vt]){
                continue;
            }
            
            visited[vt]=true;
            ArrayList<ArrayList<Integer>>neighbour=adj.get(vt);
            for(ArrayList<Integer>elements:neighbour){
                int v=elements.get(0);
                int w=elements.get(1);
                if(ans[v]>ans[vt]+w){
                    ans[v]=ans[vt]+w;
                    q.add(new Pair(v,ans[v]));
                }
            }
        }
        return ans;
    }
}

