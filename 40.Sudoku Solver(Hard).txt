//Sudoku Solver(Hard)
class Solution {
    public boolean isSafe(char board[][],int row,int col,int num){
        //for row checking
        for(int i=0;i<board.length;i++){
            if(board[row][i]==(char)(num+'0')){
                return false;
            }
        }
        //for column checking
        for(int j=0;j<board.length;j++){
            if(board[j][col]==(char)(num+'0')){
                return false;
            }
        }
        //for grid checking
        int sr=(row/3)*3;
        int sc=(col/3)*3;
        for(int i=sr;i<sr+3;i++){
            for(int j=sc;j<sc+3;j++){
                if(board[i][j]==(char)(num+'0')){
                    return false;
                }
            }
        }
        //if none of the above constraints applicable then the number for the cell is valid
        return true;
}
public  boolean solveBoard(char board[][],int row,int col){
        //when we reach the last cell of the board
        if(row==board.length){
            return true;
        }
        //for moving all the cells one by one
        int new_row=0;
        int new_col=0;
        if(col==board.length-1){
            new_row=row+1;
            new_col=0;
        }
        else{
            new_row=row;
            new_col=col+1;
        }
        //for placing the numbers
        if(board[row][col]!='.'){//if the place is not empty
            if(solveBoard(board,new_row,new_col)){
                return true;
            }
        }
        else{
            //fill the place
            for(int i=1;i<=9;i++){
                if(isSafe(board,row,col,i)){
                    board[row][col]=(char)(i+'0');
                    if(solveBoard(board,row,col)){
                        return true;
                    }
                    else{
                        board[row][col]='.';
                    }
                }
            }
        }
        //if this all cases failed
        return false;
}
    public void solveSudoku(char[][] board) {
        solveBoard(board,0,0);
    }
}