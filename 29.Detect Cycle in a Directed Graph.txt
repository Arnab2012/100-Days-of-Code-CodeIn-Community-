//Detect Cycle in a Directed Graph
class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean visited[]=new boolean[V];
        boolean recStack[]=new boolean[V];
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(i,adj,visited,recStack)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(int v,ArrayList<ArrayList<Integer>> adj,boolean vis[],boolean rec[]){
        vis[v]=true;
        rec[v]=true;
        for(Integer neighbour:adj.get(v)){
            if(!vis[neighbour]){
                if(dfs(neighbour,adj,vis,rec)){
                    return true;
                }
            }
            else if(rec[neighbour]){
                return true;
            }
        }
        rec[v]=false;
        return false;
    }
}