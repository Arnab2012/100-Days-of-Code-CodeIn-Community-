class Solution {
    public int[] leftSmall(int arr[]){
        Stack<Integer>st=new Stack<>();
        int ans[]=new int[arr.length];
        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty()&&arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()){
                ans[i]=-1;
            }
            else{
                ans[i]=st.peek();
            }
            st.push(i);
        }
        return ans;
    }
    public int[] rightSmall(int arr[]){
        Stack<Integer>st=new Stack<>();
        int ans[]=new int[arr.length];
        for(int i=arr.length-1;i>=0;i--){
            while(!st.isEmpty()&&arr[st.peek()]>=arr[i]){
                st.pop();
            }
            if(st.isEmpty()){
                ans[i]=arr.length;
            }
            else{
                ans[i]=st.peek();
            }
            st.push(i);
        }
        return ans;
    }
    public int largestRectangleArea(int[] heights) {
        int max=0;
        int ls[]=leftSmall(heights);
        int rs[]=rightSmall(heights);
        for(int i=0;i<heights.length;i++){
            int curr=(rs[i]-ls[i]-1)*heights[i];
            max=Math.max(max,curr);
        }
        return max;
    }
}